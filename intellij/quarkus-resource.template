#set( $BASE_PACKAGE_NAME = ${PACKAGE_NAME.substring(0,${PACKAGE_NAME.lastIndexOf(".")})})

package ${PACKAGE_NAME};

import jakarta.validation.Valid;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

import ${BASE_PACKAGE_NAME}.dto.${NAME}Dto;
import ${BASE_PACKAGE_NAME}.model.${NAME};
import ${BASE_PACKAGE_NAME}.service.${NAME}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URI;


@Path("/api/v1/${NAME.toLowerCase()}s")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ${NAME}Resource{

  private static final Logger LOGGER = LoggerFactory.getLogger(${NAME}Resource.class);
  private final ${NAME}Service service;

  // constructor injection
  public ${NAME}Resource(${NAME}Service ${NAME.toLowerCase()}Service){
    this.service = ${NAME.toLowerCase()}Service;
  }

  @GET
  @Operation(summary = "Returns all existing ${NAME.toLowerCase()}s")
  @APIResponses(
      value = {
          @APIResponse(
              responseCode = "200",
              description = "Get All ${NAME}s",
              content = @Content(mediaType = "application/json",
              schema = @Schema(type = SchemaType.ARRAY, implementation = ${NAME}.class))),
          @APIResponse(
              responseCode = "404",
              description = "No ${NAME.toLowerCase()}s found",
              content = @Content(mediaType = "application/json"))
      }
  )
  public Response getAll${NAME}s(){
    return Response.ok(service.getAll()).build();
  }

  @GET
  @Path("/{id}")
  @Operation(summary = "Returns an ${NAME.toLowerCase()} given the ${NAME.toLowerCase()} Id")
  @APIResponses(
      value = {
          @APIResponse(
              responseCode = "200",
              description = "Get ${NAME} by ${NAME.toLowerCase()}Id",
              content = @Content(mediaType = "application/json",
                  schema = @Schema(type = SchemaType.OBJECT, implementation = ${NAME}.class))),
          @APIResponse(
              responseCode = "404",
              description = "No ${NAME} found for the ${NAME.toLowerCase()}Id provided",
              content = @Content(mediaType = "application/json"))
      }
  )
  public Response get${NAME}ById(@PathParam("id") Long id){
    ${NAME}Dto dto = service.getById(id);
    if(dto != null){
      LOGGER.info("Found ${NAME.toLowerCase()} {}", dto);
      return Response.ok(dto).build();
    }else{
      LOGGER.debug("No ${NAME.toLowerCase()} found with id {}", id);
      return Response.status(Response.Status.NOT_FOUND).build();
    }
  }

  @POST
  @Operation(summary = "Creates a new ${NAME.toLowerCase()}")
  @APIResponses(
      value = {
          @APIResponse(
              responseCode = "201",
              description = "${NAME} created successfully",
              content = @Content(mediaType = "application/json",
              schema = @Schema(type = SchemaType.OBJECT, implementation = ${NAME}.class))),
          @APIResponse(
              responseCode = "400",
              description = "${NAME} already exists with ${NAME.toLowerCase()}Id",
              content = @Content(mediaType = "application/json")),
      }
  )
  public Response create${NAME}(@RequestBody(required = true) @Valid ${NAME}Dto ${NAME.toLowerCase()}){
    service.create(${NAME.toLowerCase()});
    URI ${NAME.toLowerCase()}Url = URI.create("/api/v1/${NAME.toLowerCase()}s/" + ${NAME.toLowerCase()}.getId());
    LOGGER.info("New ${NAME.toLowerCase()} added at URL {}", ${NAME.toLowerCase()}Url);
    return Response.created(${NAME.toLowerCase()}Url).build();
  }

  @PUT
  @Path("/{id}")
  @Operation(summary = "Updates an existing ${NAME.toLowerCase()}")
  @APIResponses(
      value = {
          @APIResponse(
              responseCode = "200",
              description = "${NAME} successfully updated",
              content = @Content(mediaType = "application/json",
              schema = @Schema(type = SchemaType.OBJECT, implementation = ${NAME}.class))),
          @APIResponse(
              responseCode = "404",
              description = "No ${NAME} found for ${NAME.toLowerCase()}Id provided",
              content = @Content(mediaType = "application/json")),
      }
  )
  public Response update${NAME}(@PathParam("id") Long id, @RequestBody @Valid ${NAME}Dto ${NAME.toLowerCase()}){
    ${NAME}Dto dto = service.getById(id);
    if(dto == null){
      return Response.status(Response.Status.NOT_FOUND).build();
    }
    dto = service.update(id,${NAME.toLowerCase()});
    LOGGER.info("${NAME} with id {} updated successfully", id);
    return Response.ok(dto).build();
  }

  @DELETE
  @Path("/{id}")
  @Operation(summary = "Deletes an existing ${NAME.toLowerCase()}")
  @APIResponses(
      value = {
          @APIResponse(
              responseCode = "204",
              description = "${NAME} successfully deleted",
              content = @Content(mediaType = "application/json",
              schema = @Schema(type = SchemaType.OBJECT, implementation = ${NAME}.class))),
          @APIResponse(
              responseCode = "404",
              description = "No ${NAME} found for ${NAME.toLowerCase()}Id provided",
              content = @Content(mediaType = "application/json")),
      }
  )
  public Response delete${NAME}(@PathParam("id") Long id){
    if(service.delete(id)){
      LOGGER.info("${NAME} deleted with id {}", id);
      return Response.noContent().build();
    };
    return Response.status(Response.Status.BAD_REQUEST).build();
  }
}
